Introduction
************

This library implements a customized Ant task used to upload/download files from a FTP server using
a client ftp library named vsftpclient, which also wraps basic FTP client functionalities of the 
ftp4j library. Whenever you need to communicate with a FTP server in your Ant file and the default
FTP Ant task is not working (which was my case) you could use this.

Installation instructions
*************************

Zipped file contains all the required elements to run this customised Ant task. Just unzip the file
and you will find the following contents:

- dist/		Contains the jar file that implements the customised Ant task, reference this in your project
            if you plan to use this customised Ant task.
- docs/		Javadoc folder
- lib/		Contains the libraries required to run the customised Ant task. That is, ant.jar, log4j.jar, 
            ftp4j.jar and vsftpclient.jar. You can use your own version of the first 3 ones, the one in your
            classpath, otherwise, add all 4 to your classpath
- src/		Source files
- build.xml	The Ant file in case you want to build the project
- Changelog
- README

In case you need to debug the customised Ant task, you will need to remote debug the Ant task. This
reading is recommended:

http://www.vitorrodrigues.com/blog/2009/07/10/debugging-ant-tasks-in-eclipse/

Usage instructions
******************

This customised ant task was built as a wrapper for the funcionalities of the vsftplclient library, which is 
also a wrapper of the ftp4j library.

To use this task in your Ant file, first you should define the task, like:


	<property name="jar.name" value="ftp.ant.task"/>
	<property name="lib.dir" value="lib"/>
	<property name="ftp4j.version.number" value="1.6.1"/>
	<property name="ftp4j.name" value="ftp4j"/>
	<property name="log4j.version.number" value="1.2.9"/>
	<property name="log4j.name" value="log4j"/>
	<property name="vsftpclient.name" value="vsftpclient"/>

	<taskdef name="verysimpleftptask"
		     classname="ftp.ant.task.VerySimpleFtpAntTask">
		<!-- Have to include in the Ant classpath all used library, otherwise it won't find it -->
		<classpath>
			<pathelement location="${lib.dir}/${jar.name}.jar" /> 
		    <pathelement location="${lib.dir}/${ftp4j.name}-${ftp4j.version.number}.jar" />
		    <pathelement location="${lib.dir}/${log4j.name}-${log4j.version.number}.jar" />
		    <pathelement location="${lib.dir}/${vsftpclient.name}.jar" />	
		</classpath>
	</taskdef>
	
Once defined you can use the task. As any other Ant task, several parameters can be and should be used:

	* host: A valid IP address or server name
	* port: A valid listening port, range is > 0 and < 65535
	* user: The user name to use when login in the server
	* pass: The password to be used when login in the server 
	* bypass: This flag allows to bypass Java SSL certification check, it is not recommended to use unless
	          you are connecting to a trusted server that is using a self-signed certificate.
	* connType: The connection type. Currently there are 3 types possible, being:
				0 - Normal FTP
				1 - FTPS implicit SSL
				2 - FTPES explicit SSL
	* action: The command to be performed in the server. Currently there are 4 possible commands:
				- putdir: Uploads the contents of a sourceDir(local) into a destDir(server)
				- putfile: Uploads a specified file into a destDir(server)
				- getdir: Downloads the contents of a sourceDir(server) into a destDir(local)
				- getfile: Downloads a specified file from sourceDir(server) into destDir(local)
				- delfile: Deletes the specified file from destDir(server)
				- delDir: Deletes the specified directory, deleting first all files within (non-recursive)
				
	* sourceDir: The source folder. It is mandatory in most commands, such as putdir, getdir and getfile
	* destDir: The destination folder. Mandatory in most commands such as putdir, putfile, getdir and getfile
	* file:	A fullpath file name. Required in getfile and putfile only.

Examples:

- Upload a whole directory:

	<verysimpleftptask host="${host}"
			           port="${port}"
					   user="${user}"
					   password="${password}"
		               bypass="true"
					   connType="2"
					   action="putdir"
					   sourceDir="${upload.dir}"
			           destDir="adk/lib/java"
		/>

-Upload a file 

	<verysimpleftptask host="${host}"
			           port="${port}"
					   user="${user}"
					   password="${password}"
		               bypass="true"
					   connType="2"
					   action="putfile"
					   file="${upload.dir}/${file}"
			           destDir="lib/java"
		/>

	
- Download a directory

	<verysimpleftptask host="${host}"
			           port="${port}"
					   user="${user}"
					   password="${password}"
		               bypass="true"
					   connType="2"
					   action="getdir"
					   sourceDir="lib/java"
			           destDir="${download.dir}"
	/>
	
- Download a file

	<verysimpleftptask host="${host}"
			           port="${port}"
					   user="${user}"
					   password="${password}"
		               bypass="true"
					   connType="2"
					   action="getfile"
				       file="${file}"
					   sourceDir="lib/java"
			           destDir="${download.dir}/"
		/>
		
- Delete a file

	<verysimpleftptask host="${host}"
			           port="${port}"
					   user="${user}"
					   password="${password}"
		               bypass="true"
					   connType="2"
					   action="delfile"
				       file="${file}"
			           destDir="lib/java"
		/>

- Delete a directory

	<verysimpleftptask host="${host}"
			           port="${port}"
					   user="${user}"
					   password="${password}"
		               bypass="true"
					   connType="2"
					   action="deldir"
			           destDir="lib/java"
		/>		

Contact
*******

Feel free to contact me regarding this library at alejandrovillamarin at gmail dot com
	
	
	